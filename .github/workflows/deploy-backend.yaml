name: deploy-backend
permissions:
  contents: read

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yaml"
  pull_request:
    branches:
      - main
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yaml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REGISTRY_REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }}
  FORECASTING_SERVICE_ACCOUNT: ${{ secrets.CLOUD_RUN_SERVICE_NAME_FORECASTING }}

###########################
# STAGING DEPLOYMENT JOB
###########################
jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Ensure Artifact Registry exists
        run: |
          gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} \
            --location=${{ env.GCP_REGION }} \
            --format="value(name)" || \
          gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPO }} \
            --repository-format=docker \
            --location=${{ env.GCP_REGION }} \
            --description="Docker repository for Go backend images"

      - name: Build and push Docker image (staging)
        run: |
          IMAGE_TAG="${{ github.sha }}"
          SERVICE_NAME="${{ secrets.CLOUD_RUN_SERVICE_NAME_STAGING }}"
          FULL_IMAGE_NAME="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/$SERVICE_NAME:$IMAGE_TAG"

          echo "Building Docker image for staging: $FULL_IMAGE_NAME"
          docker build -t $FULL_IMAGE_NAME backend/
          echo "Pushing Docker image to staging: $FULL_IMAGE_NAME"
          docker push $FULL_IMAGE_NAME

      - name: Deploy to Cloud Run (staging)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.CLOUD_RUN_SERVICE_NAME_STAGING }}
          region: ${{ env.GCP_REGION }}
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ secrets.CLOUD_RUN_SERVICE_NAME_STAGING }}:${{ github.sha }}
          env_vars: |
            GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
            ENVIRONMENT=staging
            FORECASTING_SERVICE_URL=https://${{ env.FORECASTING_SERVICE_ACCOUNT }}.${{ env.GCP_REGION }}.run.app
          flags: --service-account=${{ secrets.BACKEND_SERVICE_ACCOUNT }}

      - name: Allow backend to invoke forecasting service (staging)
        run: |
          gcloud run services add-iam-policy-binding ${{ env.FORECASTING_SERVICE_ACCOUNT}} \
            --member="serviceAccount:${{ secrets.BACKEND_SERVICE_ACCOUNT }}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}

  ###########################
  # PRODUCTION DEPLOYMENT JOB
  ###########################
  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Ensure Artifact Registry exists
        run: |
          gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} \
            --location=${{ env.GCP_REGION }} \
            --format="value(name)" || \
          gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPO }} \
            --repository-format=docker \
            --location=${{ env.GCP_REGION }} \
            --description="Docker repository for Go backend images"

      - name: Build and push Docker image (prod)
        run: |
          IMAGE_TAG="${{ github.sha }}"
          SERVICE_NAME="${{ secrets.CLOUD_RUN_SERVICE_NAME_PROD }}"
          FULL_IMAGE_NAME="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/$SERVICE_NAME:$IMAGE_TAG"

          echo "Building Docker image for prod: $FULL_IMAGE_NAME"
          docker build -t $FULL_IMAGE_NAME backend/
          echo "Pushing Docker image to prod: $FULL_IMAGE_NAME"
          docker push $FULL_IMAGE_NAME

      - name: Deploy to Cloud Run (prod)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.CLOUD_RUN_SERVICE_NAME_PROD }}
          region: ${{ env.GCP_REGION }}
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ secrets.CLOUD_RUN_SERVICE_NAME_PROD }}:${{ github.sha }}
          env_vars: |
            GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
            ENVIRONMENT=production
            FORECASTING_SERVICE_URL=https://${{ env.FORECASTING_SERVICE_ACCOUNT }}.${{ env.GCP_REGION }}.run.app
          flags: --service-account=${{ secrets.BACKEND_SERVICE_ACCOUNT }}

      - name: Allow backend to invoke forecasting service
        run: |
          gcloud run services add-iam-policy-binding ${{ env.FORECASTING_SERVICE_ACCOUNT }} \
            --member="serviceAccount:${{ secrets.BACKEND_SERVICE_ACCOUNT }}" \
            --role="roles/run.invoker" \
            --region=${{ env.GCP_REGION }}
